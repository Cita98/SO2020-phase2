------------------------- DOCUMENTAZIONE PHASE1 -------------------------

Implementazione delle strutture dati del livello 2 di RiKaya utilizzate dal livello sovrastante ovvero il kernel. 
Implementazione delle funzionalità relative ai PCB (Process Control Block):
- Gestione delle code dei PCB
- Gestione dell'albero dei PCB
- Gestione di una Active Semaphore list (ASL), che gestisce la coda dei processi bloccati su un semaforo.

ASSUNZIONE: Non più di 20 processi concorrenti in Rikaya -> MAXPROC = 20

--------------------------> FUNZIONI PER pcb.h <-------------------------------

- pcbFree: lista dei PCB che sono liberi o inutilizzati.
- pcbfree_h: elemento sentinella della lista pcbFree.
- pcbFree_table[MAX_PROC]: array di PCB con dimensione massima di MAX_PROC. 

----------> FUNZIONI AUSILIARIE

#A -- void INIT_STATE(state_t* state)
Funzione ausiliaria che inizializza il campo state della struttura pcb. 

----------> ALLOCAZIONE DEI PCB

#1 -- void initPcbs()
Inizializza la pcbFree in modo da contenere tutti gli elementi della pcbFree_table.

#2 -- void freePcb(pcb_t * p)
 Inserisce il PCB puntato da p nella lista dei PCB liberi (pcbFree).
 
#3 -- pcb_t *allocPcb()
Restituisce NULL se la pcbFree è vuota. 
Altrimenti rimuove un elemento dalla pcbFree, inizializza tutti i campi (NULL/0) e restituisce l’elemento rimosso.

NOTA: I pcb possono essere organizzati in code o in alberi di processi.

----------> LISTA DEI PCB

#4 -- pcb_t* mkEmptyProcQ(struct list_head* head) 
Inizializza la lista dei PCB, Inizializzando l'elemento sentinella.

#5 -- pcb_t* mkEmptyProcQ(struct list_head* head)
Restituisce True Se la lista puntata da head è vuota, False altrimenti 

#6 -- void insertProcQ(struct list_head* head, pcb* p)
Inserisce l’elemento puntato da p nella coda dei processi puntata da head. L’inserimento deve avvenire tenendo conto della priorita’ di ciascun pcb (campo p->priority).La coda dei processi deve essere ordinata in base alla priorita’ dei PCB, in ordine decrescente (i.e. l’elemento di testa è l’elemento con la priorita’ più alta).

#7 -- pcb_t headProcQ(struct list_head* head)
Restituisce l’elemento di testa della coda dei processi da head  senza rimuoverlo. 
Ritorna NULL se la coda non ha elementi.

#8 -- pcb_t* removeProcQ(struct list_head* head)
Rimuove il primo elemento dalla coda dei processi puntata da head. Ritorna NULL se la coda è vuota. Altrimenti ritorna il puntatore all’elemento rimosso dalla lista.

#9 -- pcb_t* outProcQ(struct list_head* head, pcb_t *p)
Rimuove il PCB puntato da p dalla coda dei processi puntata da head. Se p non è presente nella coda, restituisce NULL

----------> ALBERI DI PCB

- Ogni genitore contiene un list_head (p_child) che punta alla lista dei figli.
- Ogni figlio ha un puntatore al padre (p_parent) ed un list_head che punta alla lista dei fratelli.

#10 -- int emptyChild(pcb_t *p)
Restituisce TRUE se il PCB puntato da p non ha figli, restituisce FALSE altrimenti.

#11 -- void insertChild(pcb_t *prnt,pcb_t *p)
Inserisce il PCB puntato da p come figlio del PCB puntato da prnt.

#12 – pcb_t* removeChild(pcb_t *p)
Rimuove il primo figlio del PCB puntato da p. Se p non ha figli, restituisce NULL

#13 -- pcb_t *outChild(pcb_t* p)
Rimuove il PCB puntato da p dalla lista dei figli del padre. Se il PCB puntato da p non ha un padre, restituisce NULL. Altrimenti restituisce l’elemento rimosso (cioè p). A differenza della removeChild, p può trovarsi in una posizione arbitraria (ossia non è necessariamente il primo figlio del padre).


SEMAFORI: In RiKaya, l’accesso alle risorse condivise avviene attraverso l’utilizzo di semafori. Ad ogni semaforo è associato un descrittore (SEMD).
- semd_table[MAX_PROC]: array di SEMD con dimensione massima di MAX_PROC. 
- semdFree: Lista dei SEMD liberi o inutilizzati.
- semdFree_h: elemento sentinella della lista semdFree. 
- semd_h: elemento sentinella della lista ASL.

Gestione della lista dei SEMD attivi (Active Semaphore List – ASL)

--------------------------> FUNZIONI PER asl.h <-------------------------------

#14 -- semd_t* getSemd(int *key)
Restituisce il puntatore al SEMD nella ASL la cui chiave è pari a key. Se non esiste un elemento nella ASL con chiave eguale a key, viene restituito NULL.

#15 -- int insertBlocked(int *key,pcb_t *p)
Viene inserito il PCB puntato da p nella coda dei processi bloccati associata al SEMD con chiave key. Se il semaforo corrispondente non è presente nella ASL, alloca un nuovo SEMD dalla lista di quelli liberi (semdFree) e lo inserisce nella ASL, settando I campi in maniera opportuna (i.e. key e s_procQ). Se non è possibile allocare un nuovo SEMD perché la lista di quelli liberi è vuota, restituisce TRUE. In tutti gli altri casi, restituisce FALSE.

#16 -- pcb_t* removeBlocked(int *key)
Ritorna il primo PCB dalla coda dei processi bloccati (s_ProcQ) associata al SEMD della ASL con chiave key. Se tale descrittore non esiste nella ASL, restituisce NULL. Altrimenti, restituisce l’elemento rimosso. Se la coda dei processi bloccati per il semaforo diventa vuota, rimuove il descrittore corrispondente dalla ASL e lo inserisce nella coda dei descrittori liberi (semdFree).

#17 -- pcb_t* outBlocked(pcb_t *p)
Rimuove il PCB puntato da p dalla coda del semaforo su cui è bloccato (indicato da p- >p_semKey). Se il PCB non compare in tale coda, allora restituisce NULL (condizione di errore). Altrimenti, restituisce p.

#18 -- pcb_t* headBlocked(int *key)
Restituisce (senza rimuovere) il puntatore al PCB che si trova in testa alla coda dei processi associata al SEMD con chiave key. Ritorna NULL se il SEMD non compare nella ASL oppure se compare ma la sua coda dei processi è vuota.

#19 -- void outChildBlocked(pcb_t *p)
Rimuove il PCB puntato da p dalla coda del semaforo su cui è bloccato (indicato da p- >p_semKey). 
Inoltre, elimina tutti i processi dell’albero radicato in p (ossia tutti i processi che hanno come avo p) dalle eventuali code dei semafori su cui sono bloccati.

#20 -- void initASL()
Inizializza la lista dei semdFree in modo da contenere tutti gli elementi della semdTable. Questo metodo viene invocato una volta sola durante l’inizializzazione della struttura dati.

------------------------- DOCUMENTAZIONE PHASE1.5 -------------------------
--LIVELLO 3 DEL S.O--

Nella fase 1.5 vengono implementate in maniera parziale le funzionalità che il nucleo deve gestire, per poi completare il tutto nella fase 2.
	- Inizializzazione del sistema
	- Scheduling dei processi
	- Gestione delle syscall
	- Gestione degli interrupt

--SPIEGAZIONE FILE--

--> handler.c/handler.h: Contengono le funzioni per la gestione delle eccezioni generate da interrupt, syscall, trap e tlb (le ultime due non gestite in questa fase)
	- int_handler gestisce gli interrupt ma solo l'interval timer in questa fase
	- syscall_handler gestisce le system call ma solo la 3 (TERMINATE PROCESS) in questa fase

--> interrupt.c/interrupt.h  e syscall.c/syscall.h :Contengono rispettivamente le funzioni e le costanti relative ali interrupt e alle systemcall.
	- init_interrupt / init_syscall inizializzano le new area
	- nei file intterupt.h/syscall.h sono definite le costanti utili per l'implementazione
	- nel file syscall.c è definita anche la funzione get_SysNumb che ritorna il numero della systemcall chiamata, poi sono definite tutte le implementazioni delle syscall (per ora solo la TERMINATE PROCESS)
	
        Per quanto riguarda la funzione terminate_process, contenuta in syscall.c, abbiamo scelto di implementarla semplicemente richiamando la funzione outChildBlocked (implementata nel file asl.c) poichè, anche se creata per scopi differenti, fa esattamente ciò che la funzione terminate_process è
        tenuta a fare, ovvero eliminare il processo corrente (che viene passato come parametro) e tutta la sua progenie. Abbiamo fatto questa scelta poichè ci sembrava inutile creare un'altra funzione praticamente identica, pur non utilizzando i file asl (i semafori) per nessun altro scopo in questa fase. 
        Decideremo in seguito, se avremo altre necessità, se cambiarla o meno per la prossima fase e quindi creare un'altra un funzione separata ma per ora fa esattamente il suo compito ovvero terminare il processo.

    Nota: Per questione di ordine abbiamo deciso di tenere separato l'handler per essere il più ordinati possibile.

--> scheduler.c/scheduler.h: Contiene tutte le funzinoi per la gestione della schedulazione dei processi, ovvero la gestione del caricamento dei processi all'interno del processore.
        I processi vengono scelti in base alla loro priorita’ che viene gestita dalla funzione di aging, questa funzione va a modificare la priorita’ dei processi che non vengono scelti nel momento in cui viene prelevato un processo con priorita’maggiore
        Questo per evitare starvation.
	- In questo file abbiamo definito le varibili che saranno condivise da più file ovvero:
		Current_ proc - puntatore al processo corrente
		Head_rd - Puntatore alla testa della lista dei processi pronti
	  Abbiamo deciso di definirle qui e di conseguenza abbiamo aggiunto delle funzioni per poterle utilizzare altrove senza doverle ridefinire e per tenerle in un certo senso "nascoste" dagli altri file. 
	- Tutte le funzioni di gestione sono abbastanza semplici, ogniuna ha la sua spiegazione scritta affianco alla propria definizione nel file scheduler.h ed è spiegata dove occorre in ogni passo attraverso commenti nel file scheduler.c

--> utilis.c/utilis.h: Contengono tutte le funzioni utili alle parti del kernel.
	Fuzioni ausiliarie
		- cp_state prende in input due puntatori alla struttura state_t, sorgente e destinazione, copia lo stato sorgente nello stato di destinazione, differente per le due architetture.
	Funzioni di inizializzazione
		- init_ProcState prende in input il puntatore ad un processo (pcb_t) e ne inizializza il campo status
	Gestione del timer
		- get_Timescale prende in input i ms e li scala in base al time scale dell'architettura
		- setIT_TIMER funzione per settare l'interval timer, abbiamo usato l'interval timer poichè in comune ad entrambe le architetture
        
--> main.c: Richiama la funzioni per l'inizializzazione delle varie strutture, inizializza i processi e li aggiunge alla ready queue, richiama lo scheduler per far partire il sistema.

--> trap.c/trap.h / tlb.c/tlb.h: Contengono l'inizializzazione delle pgmtrap e delle tlb exception, non sono ancora state gestite in questa fase.

--> const.h: contiene la definizione delle costanti in comune alle due architetture e richiama i file constuarm.h o constumps.h in base al target speciicato, in questi due file sono specificate invece le costanti delle singole architetture. In ogniuno dei due file è definita la CAUSE_IP_GET che permette di reperire il numero della linea che ha sollevato l'interrupt, in maniera differente dalle due architetture e attraverso la lettura del registro cause.
 

IMPORTANTE: Ogni file .h contiene le dichiarazioni delle funzioni implementate nel relativo file .c, affianco vi è una breve spiegazione di ciò che la funzione è tenuta a fare. Nei file .c invece le funzioni sono commentate passo per passo.
	  		Abbiamo fatto questa scelta in modo tale da facilitare la comprensione immediata delle funzioni senza dover per ogniuna di esse controllare la documentazione.
